name: 'Francinette (42 Tester)'
description: 'Run Francinette (also known as paco) to test 42 School projects'
author: 'solrac97gr'
inputs:
  project:
    description: 'Project to test (optional - will be detected automatically if not specified)'
    required: false
    default: ''
  strict:
    description: 'Run in strict mode to test against memory leaks and other issues'
    required: false
    default: 'false'
  tests:
    description: 'Specific tests to run (space separated)'
    required: false
    default: ''
runs:
  using: 'composite'
  steps:
    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc clang libbsd-dev libncurses-dev valgrind python3-pip python3-dev python3-venv
        python3 -m pip install --upgrade pip
        pip3 install wheel

    - name: Install Francinette
      shell: bash
      run: |
        cd $HOME
        git clone --recursive https://github.com/xicodomingues/francinette.git
        cd francinette
        python3 -m venv venv
        . venv/bin/activate
        pip3 install -r requirements.txt
        pip3 install norminette
        chmod +x tester.sh
        
    - name: Run Francinette
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE
        
        ARGS=""
        if [ "${{ inputs.strict }}" == "true" ]; then
          ARGS="$ARGS --strict"
        fi
        
        if [ -n "${{ inputs.project }}" ]; then
          ARGS="$ARGS --project ${{ inputs.project }}"
        fi
        
        if [ -n "${{ inputs.tests }}" ]; then
          ARGS="$ARGS ${{ inputs.tests }}"
        fi
        
        # Run Francinette and save the output to a file
        $HOME/francinette/tester.sh $ARGS 2>&1 | tee /tmp/francinette_output.txt
        
    - name: Result Summary
      shell: bash
      run: |
        # Check if there are errors in the output - remove null bytes to avoid warnings
        OUTPUT=$(cat /tmp/francinette_output.txt | tr -d '\0')
        
        echo "============= FRANCINETTE RESULT SUMMARY ============="
        
        FAILED=false
        
        # Check for Norminette errors
        if echo "$OUTPUT" | grep -q "Norminette Errors:"; then
          NORM_ERRORS=$(echo "$OUTPUT" | grep "Norminette Errors:" | sed 's/Norminette Errors: //')
          echo "❌ Norminette errors found in files:"
          echo "$NORM_ERRORS"
          FAILED=true
        else
          echo "✅ No Norminette errors found"
        fi
        
        # Check for failed tests
        if echo "$OUTPUT" | grep -q "Failed tests:"; then
          FAILED_TESTS=$(echo "$OUTPUT" | grep "Failed tests:" | sed 's/Failed tests: //')
          echo "❌ Tests failed for functions:"
          echo "$FAILED_TESTS"
          FAILED=true
        else
          echo "✅ All tests passed"
        fi
        
        # Extract and display passed tests
        if echo "$OUTPUT" | grep -q "Passed tests:"; then
          PASSED_TESTS=$(echo "$OUTPUT" | grep "Passed tests:" | sed 's/Passed tests: //')
          echo "✅ Passed tests:"
          echo "$PASSED_TESTS"
        fi
        
        # Extract and display missing functions (not considered errors)
        if echo "$OUTPUT" | grep -q "Missing functions:"; then
          MISSING_FUNCTIONS=$(echo "$OUTPUT" | grep "Missing functions:" | sed 's/Missing functions: //')
          echo "ℹ️ Missing functions (not considered errors):"
          echo "$MISSING_FUNCTIONS"
        fi
        
        echo "===================================================="
        
        # Fail the action if there were any errors
        if [ "$FAILED" = true ]; then
          echo "::error::Francinette found errors in your code. See the summary above for details."
          exit 1
        else
          echo "✅ All tests passed successfully!"
        fi
        
branding:
  icon: 'check-circle'
  color: 'green'
